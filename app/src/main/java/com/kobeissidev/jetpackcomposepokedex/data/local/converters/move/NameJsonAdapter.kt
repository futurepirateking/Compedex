// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.kobeissidev.jetpackcomposepokedex.data.local.converters.move

import com.kobeissidev.jetpackcomposepokedex.data.model.move.LanguageXX
import com.kobeissidev.jetpackcomposepokedex.data.model.move.Name
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String

public class NameJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Name>() {
  private val options: JsonReader.Options = JsonReader.Options.of("language", "name")

  private val languageXXAdapter: JsonAdapter<LanguageXX> = moshi.adapter(LanguageXX::class.java,
      emptySet(), "language")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  @Volatile
  private var constructorRef: Constructor<Name>? = null

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Name").append(')') }

  public override fun fromJson(reader: JsonReader): Name {
    var language: LanguageXX? = null
    var name: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          language = languageXXAdapter.fromJson(reader) ?: throw Util.unexpectedNull("language",
              "language", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffffc.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Name(
          language = language as LanguageXX,
          name = name as String
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Name> = this.constructorRef ?:
          Name::class.java.getDeclaredConstructor(LanguageXX::class.java, String::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          language,
          name,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Name?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("language")
    languageXXAdapter.toJson(writer, value_.language)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.endObject()
  }
}
