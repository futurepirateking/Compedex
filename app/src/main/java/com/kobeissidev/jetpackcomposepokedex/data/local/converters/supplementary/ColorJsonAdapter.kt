// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.kobeissidev.jetpackcomposepokedex.data.local.converters.supplementary

import com.kobeissidev.jetpackcomposepokedex.data.model.supplementary.Color
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import kotlin.Float

public class ColorJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Color>() {
  private val options: JsonReader.Options = JsonReader.Options.of("red", "green", "blue")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(), "red")

  public override fun toString(): String = buildString(27) {
      append("GeneratedJsonAdapter(").append("Color").append(')') }

  public override fun fromJson(reader: JsonReader): Color {
    var red: Float? = null
    var green: Float? = null
    var blue: Float? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> red = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("red", "red", reader)
        1 -> green = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("green", "green",
            reader)
        2 -> blue = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("blue", "blue",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Color(
        red = red ?: throw Util.missingProperty("red", "red", reader),
        green = green ?: throw Util.missingProperty("green", "green", reader),
        blue = blue ?: throw Util.missingProperty("blue", "blue", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Color?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("red")
    floatAdapter.toJson(writer, value_.red)
    writer.name("green")
    floatAdapter.toJson(writer, value_.green)
    writer.name("blue")
    floatAdapter.toJson(writer, value_.blue)
    writer.endObject()
  }
}
