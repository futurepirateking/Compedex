// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress(
    "DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN"
)

package com.kobeissidev.jetpackcomposepokedex.data.local.converters.entry

import com.kobeissidev.jetpackcomposepokedex.data.model.entry.PokemonEntry
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString
import com.kobeissidev.jetpackcomposepokedex.data.model.entry.Result

public class PokemonEntryJsonAdapter(
    moshi: Moshi
) : JsonAdapter<PokemonEntry>() {
    private val options: JsonReader.Options = JsonReader.Options.of(
        "count", "next", "previous",
        "results", "id"
    )

    private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "count")

    private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(
        String::class.java,
        emptySet(), "next"
    )

    private val listOfResultAdapter: JsonAdapter<List<Result>> =
        moshi.adapter(
            Types.newParameterizedType(List::class.java, Result::class.java), emptySet(),
            "results"
        )

    @Volatile
    private var constructorRef: Constructor<PokemonEntry>? = null

    public override fun toString(): String = buildString(34) {
        append("GeneratedJsonAdapter(").append("PokemonEntry").append(')')
    }

    public override fun fromJson(reader: JsonReader): PokemonEntry {
        var count: Int? = null
        var next: String? = null
        var previous: String? = null
        var results: List<Result>? = null
        var id: Int? = 0
        var mask0 = -1
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> count = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "count", "count",
                    reader
                )
                1 -> next = nullableStringAdapter.fromJson(reader)
                2 -> previous = nullableStringAdapter.fromJson(reader)
                3 -> results = listOfResultAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "results",
                    "results", reader
                )
                4 -> {
                    id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
                    // $mask = $mask and (1 shl 4).inv()
                    mask0 = mask0 and 0xffffffef.toInt()
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        if (mask0 == 0xffffffef.toInt()) {
            // All parameters with defaults are set, invoke the constructor directly
            return PokemonEntry(
                count = count ?: throw Util.missingProperty("count", "count", reader),
                next = next,
                previous = previous,
                results = results ?: throw Util.missingProperty("results", "results", reader),
                id = id as Int
            )
        } else {
            // Reflectively invoke the synthetic defaults constructor
            @Suppress("UNCHECKED_CAST")
            val localConstructor: Constructor<PokemonEntry> = this.constructorRef ?: PokemonEntry::class.java.getDeclaredConstructor(
                Int::class.javaPrimitiveType,
                String::class.java, String::class.java, List::class.java, Int::class.javaPrimitiveType,
                Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER
            ).also {
                this.constructorRef = it
            }
            return localConstructor.newInstance(
                count ?: throw Util.missingProperty("count", "count", reader),
                next,
                previous,
                results ?: throw Util.missingProperty("results", "results", reader),
                id,
                mask0,
                /* DefaultConstructorMarker */ null
            )
        }
    }

    public override fun toJson(writer: JsonWriter, value_: PokemonEntry?): Unit {
        if (value_ == null) {
            throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("count")
        intAdapter.toJson(writer, value_.count)
        writer.name("next")
        nullableStringAdapter.toJson(writer, value_.next)
        writer.name("previous")
        nullableStringAdapter.toJson(writer, value_.previous)
        writer.name("results")
        listOfResultAdapter.toJson(writer, value_.results)
        writer.name("id")
        intAdapter.toJson(writer, value_.id)
        writer.endObject()
    }
}
