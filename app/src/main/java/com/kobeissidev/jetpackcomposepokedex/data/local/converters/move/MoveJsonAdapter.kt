// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.kobeissidev.jetpackcomposepokedex.data.local.converters.move

import com.kobeissidev.jetpackcomposepokedex.data.model.move.*
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString
import com.kobeissidev.jetpackcomposepokedex.data.model.move.Target

public class MoveJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Move>() {
  private val options: JsonReader.Options = JsonReader.Options.of("accuracy", "contest_combos",
      "contest_effect", "contest_type", "damage_class", "effect_chance", "effect_changes",
      "effect_entries", "flavor_text_entries", "generation", "id", "learned_by_pokemon", "machines",
      "meta", "name", "names", "past_values", "power", "pp", "priority", "stat_changes",
      "super_contest_effect", "target", "type")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "accuracy")

  private val contestCombosAdapter: JsonAdapter<ContestCombos> =
      moshi.adapter(ContestCombos::class.java, emptySet(), "contestCombos")

  private val contestEffectAdapter: JsonAdapter<ContestEffect> =
      moshi.adapter(ContestEffect::class.java, emptySet(), "contestEffect")

  private val contestTypeAdapter: JsonAdapter<ContestType> = moshi.adapter(ContestType::class.java,
      emptySet(), "contestType")

  private val damageClassAdapter: JsonAdapter<DamageClass> = moshi.adapter(DamageClass::class.java,
      emptySet(), "damageClass")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "effectChance")

  private val listOfStringAdapter: JsonAdapter<List<String>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "effectChanges")

  private val listOfEffectEntryAdapter: JsonAdapter<List<EffectEntry>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, EffectEntry::class.java),
      emptySet(), "effectEntries")

  private val listOfFlavorTextEntryAdapter: JsonAdapter<List<FlavorTextEntry>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, FlavorTextEntry::class.java),
      emptySet(), "flavorTextEntries")

  private val generationAdapter: JsonAdapter<Generation> = moshi.adapter(Generation::class.java,
      emptySet(), "generation")

  private val listOfLearnedByPokemonAdapter: JsonAdapter<List<LearnedByPokemon>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, LearnedByPokemon::class.java),
      emptySet(), "learnedByPokemon")

  private val metaAdapter: JsonAdapter<Meta> = moshi.adapter(Meta::class.java, emptySet(), "meta")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val listOfNameAdapter: JsonAdapter<List<Name>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Name::class.java), emptySet(),
      "names")

  private val superContestEffectAdapter: JsonAdapter<SuperContestEffect> =
      moshi.adapter(SuperContestEffect::class.java, emptySet(), "superContestEffect")

  private val targetAdapter: JsonAdapter<Target> = moshi.adapter(Target::class.java, emptySet(),
      "target")

  private val typeAdapter: JsonAdapter<Type> = moshi.adapter(Type::class.java, emptySet(), "type")

  @Volatile
  private var constructorRef: Constructor<Move>? = null

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Move").append(')') }

  public override fun fromJson(reader: JsonReader): Move {
    var accuracy: Int? = 0
    var contestCombos: ContestCombos? = null
    var contestEffect: ContestEffect? = null
    var contestType: ContestType? = null
    var damageClass: DamageClass? = null
    var effectChance: String? = null
    var effectChanges: List<String>? = null
    var effectEntries: List<EffectEntry>? = null
    var flavorTextEntries: List<FlavorTextEntry>? = null
    var generation: Generation? = null
    var id: Int? = 0
    var learnedByPokemon: List<LearnedByPokemon>? = null
    var machines: List<String>? = null
    var meta: Meta? = null
    var name: String? = null
    var names: List<Name>? = null
    var pastValues: List<String>? = null
    var power: Int? = 0
    var pp: Int? = 0
    var priority: Int? = 0
    var statChanges: List<String>? = null
    var superContestEffect: SuperContestEffect? = null
    var target: Target? = null
    var type: Type? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          accuracy = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("accuracy",
              "accuracy", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          contestCombos = contestCombosAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("contestCombos", "contest_combos", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          contestEffect = contestEffectAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("contestEffect", "contest_effect", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          contestType = contestTypeAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("contestType", "contest_type", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          damageClass = damageClassAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("damageClass", "damage_class", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          effectChance = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          effectChanges = listOfStringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("effectChanges", "effect_changes", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          effectEntries = listOfEffectEntryAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("effectEntries", "effect_entries", reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          flavorTextEntries = listOfFlavorTextEntryAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("flavorTextEntries", "flavor_text_entries", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          generation = generationAdapter.fromJson(reader) ?: throw Util.unexpectedNull("generation",
              "generation", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          learnedByPokemon = listOfLearnedByPokemonAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("learnedByPokemon", "learned_by_pokemon", reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          machines = listOfStringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("machines",
              "machines", reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> {
          meta = metaAdapter.fromJson(reader) ?: throw Util.unexpectedNull("meta", "meta", reader)
          // $mask = $mask and (1 shl 13).inv()
          mask0 = mask0 and 0xffffdfff.toInt()
        }
        14 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 14).inv()
          mask0 = mask0 and 0xffffbfff.toInt()
        }
        15 -> {
          names = listOfNameAdapter.fromJson(reader) ?: throw Util.unexpectedNull("names", "names",
              reader)
          // $mask = $mask and (1 shl 15).inv()
          mask0 = mask0 and 0xffff7fff.toInt()
        }
        16 -> {
          pastValues = listOfStringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("pastValues", "past_values", reader)
          // $mask = $mask and (1 shl 16).inv()
          mask0 = mask0 and 0xfffeffff.toInt()
        }
        17 -> {
          power = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("power", "power", reader)
          // $mask = $mask and (1 shl 17).inv()
          mask0 = mask0 and 0xfffdffff.toInt()
        }
        18 -> {
          pp = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pp", "pp", reader)
          // $mask = $mask and (1 shl 18).inv()
          mask0 = mask0 and 0xfffbffff.toInt()
        }
        19 -> {
          priority = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("priority",
              "priority", reader)
          // $mask = $mask and (1 shl 19).inv()
          mask0 = mask0 and 0xfff7ffff.toInt()
        }
        20 -> {
          statChanges = listOfStringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("statChanges", "stat_changes", reader)
          // $mask = $mask and (1 shl 20).inv()
          mask0 = mask0 and 0xffefffff.toInt()
        }
        21 -> {
          superContestEffect = superContestEffectAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("superContestEffect", "super_contest_effect", reader)
          // $mask = $mask and (1 shl 21).inv()
          mask0 = mask0 and 0xffdfffff.toInt()
        }
        22 -> {
          target = targetAdapter.fromJson(reader) ?: throw Util.unexpectedNull("target", "target",
              reader)
          // $mask = $mask and (1 shl 22).inv()
          mask0 = mask0 and 0xffbfffff.toInt()
        }
        23 -> {
          type = typeAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type", reader)
          // $mask = $mask and (1 shl 23).inv()
          mask0 = mask0 and 0xff7fffff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xff000000.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Move(
          accuracy = accuracy as Int,
          contestCombos = contestCombos as ContestCombos,
          contestEffect = contestEffect as ContestEffect,
          contestType = contestType as ContestType,
          damageClass = damageClass as DamageClass,
          effectChance = effectChance,
          effectChanges = effectChanges as List<String>,
          effectEntries = effectEntries as List<EffectEntry>,
          flavorTextEntries = flavorTextEntries as List<FlavorTextEntry>,
          generation = generation as Generation,
          id = id as Int,
          learnedByPokemon = learnedByPokemon as List<LearnedByPokemon>,
          machines = machines as List<String>,
          meta = meta as Meta,
          name = name as String,
          names = names as List<Name>,
          pastValues = pastValues as List<String>,
          power = power as Int,
          pp = pp as Int,
          priority = priority as Int,
          statChanges = statChanges as List<String>,
          superContestEffect = superContestEffect as SuperContestEffect,
          target = target as Target,
          type = type as Type
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Move> = this.constructorRef ?:
          Move::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
          ContestCombos::class.java, ContestEffect::class.java, ContestType::class.java,
          DamageClass::class.java, String::class.java, List::class.java, List::class.java,
          List::class.java, Generation::class.java, Int::class.javaPrimitiveType, List::class.java,
          List::class.java, Meta::class.java, String::class.java, List::class.java,
          List::class.java, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, List::class.java, SuperContestEffect::class.java,
          Target::class.java, Type::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          accuracy,
          contestCombos,
          contestEffect,
          contestType,
          damageClass,
          effectChance,
          effectChanges,
          effectEntries,
          flavorTextEntries,
          generation,
          id,
          learnedByPokemon,
          machines,
          meta,
          name,
          names,
          pastValues,
          power,
          pp,
          priority,
          statChanges,
          superContestEffect,
          target,
          type,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Move?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("accuracy")
    intAdapter.toJson(writer, value_.accuracy)
    writer.name("contest_combos")
    contestCombosAdapter.toJson(writer, value_.contestCombos)
    writer.name("contest_effect")
    contestEffectAdapter.toJson(writer, value_.contestEffect)
    writer.name("contest_type")
    contestTypeAdapter.toJson(writer, value_.contestType)
    writer.name("damage_class")
    damageClassAdapter.toJson(writer, value_.damageClass)
    writer.name("effect_chance")
    nullableStringAdapter.toJson(writer, value_.effectChance)
    writer.name("effect_changes")
    listOfStringAdapter.toJson(writer, value_.effectChanges)
    writer.name("effect_entries")
    listOfEffectEntryAdapter.toJson(writer, value_.effectEntries)
    writer.name("flavor_text_entries")
    listOfFlavorTextEntryAdapter.toJson(writer, value_.flavorTextEntries)
    writer.name("generation")
    generationAdapter.toJson(writer, value_.generation)
    writer.name("id")
    intAdapter.toJson(writer, value_.id)
    writer.name("learned_by_pokemon")
    listOfLearnedByPokemonAdapter.toJson(writer, value_.learnedByPokemon)
    writer.name("machines")
    listOfStringAdapter.toJson(writer, value_.machines)
    writer.name("meta")
    metaAdapter.toJson(writer, value_.meta)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("names")
    listOfNameAdapter.toJson(writer, value_.names)
    writer.name("past_values")
    listOfStringAdapter.toJson(writer, value_.pastValues)
    writer.name("power")
    intAdapter.toJson(writer, value_.power)
    writer.name("pp")
    intAdapter.toJson(writer, value_.pp)
    writer.name("priority")
    intAdapter.toJson(writer, value_.priority)
    writer.name("stat_changes")
    listOfStringAdapter.toJson(writer, value_.statChanges)
    writer.name("super_contest_effect")
    superContestEffectAdapter.toJson(writer, value_.superContestEffect)
    writer.name("target")
    targetAdapter.toJson(writer, value_.target)
    writer.name("type")
    typeAdapter.toJson(writer, value_.type)
    writer.endObject()
  }
}
