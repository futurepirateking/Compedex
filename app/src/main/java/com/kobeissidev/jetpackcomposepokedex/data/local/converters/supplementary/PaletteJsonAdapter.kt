// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.kobeissidev.jetpackcomposepokedex.data.local.converters.supplementary

import com.kobeissidev.jetpackcomposepokedex.data.model.supplementary.Color
import com.kobeissidev.jetpackcomposepokedex.data.model.supplementary.Palette
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class PaletteJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Palette>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "backgroundColor",
      "titleTextColor", "bodyTextColor", "isDefault")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val colorAdapter: JsonAdapter<Color> = moshi.adapter(Color::class.java, emptySet(),
      "backgroundColor")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isDefault")

  @Volatile
  private var constructorRef: Constructor<Palette>? = null

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Palette").append(')') }

  public override fun fromJson(reader: JsonReader): Palette {
    var name: String? = null
    var backgroundColor: Color? = null
    var titleTextColor: Color? = null
    var bodyTextColor: Color? = null
    var isDefault: Boolean? = false
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          backgroundColor = colorAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("backgroundColor", "backgroundColor", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          titleTextColor = colorAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("titleTextColor", "titleTextColor", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          bodyTextColor = colorAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("bodyTextColor", "bodyTextColor", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          isDefault = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("isDefault",
              "isDefault", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xffffffe0.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Palette(
          name = name as String,
          backgroundColor = backgroundColor as Color,
          titleTextColor = titleTextColor as Color,
          bodyTextColor = bodyTextColor as Color,
          isDefault = isDefault as Boolean
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Palette> = this.constructorRef ?:
          Palette::class.java.getDeclaredConstructor(String::class.java, Color::class.java,
          Color::class.java, Color::class.java, Boolean::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          name,
          backgroundColor,
          titleTextColor,
          bodyTextColor,
          isDefault,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Palette?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("backgroundColor")
    colorAdapter.toJson(writer, value_.backgroundColor)
    writer.name("titleTextColor")
    colorAdapter.toJson(writer, value_.titleTextColor)
    writer.name("bodyTextColor")
    colorAdapter.toJson(writer, value_.bodyTextColor)
    writer.name("isDefault")
    booleanAdapter.toJson(writer, value_.isDefault)
    writer.endObject()
  }
}
