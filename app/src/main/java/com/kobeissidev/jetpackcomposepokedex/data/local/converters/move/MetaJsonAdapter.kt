// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.kobeissidev.jetpackcomposepokedex.data.local.converters.move

import com.kobeissidev.jetpackcomposepokedex.data.model.move.Ailment
import com.kobeissidev.jetpackcomposepokedex.data.model.move.Category
import com.kobeissidev.jetpackcomposepokedex.data.model.move.Meta
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class MetaJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Meta>() {
  private val options: JsonReader.Options = JsonReader.Options.of("ailment", "ailment_chance",
      "category", "crit_rate", "drain", "flinch_chance", "healing", "max_hits", "max_turns",
      "min_hits", "min_turns", "stat_chance")

  private val ailmentAdapter: JsonAdapter<Ailment> = moshi.adapter(Ailment::class.java, emptySet(),
      "ailment")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "ailmentChance")

  private val categoryAdapter: JsonAdapter<Category> = moshi.adapter(Category::class.java,
      emptySet(), "category")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "maxHits")

  @Volatile
  private var constructorRef: Constructor<Meta>? = null

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Meta").append(')') }

  public override fun fromJson(reader: JsonReader): Meta {
    var ailment: Ailment? = null
    var ailmentChance: Int? = 0
    var category: Category? = null
    var critRate: Int? = 0
    var drain: Int? = 0
    var flinchChance: Int? = 0
    var healing: Int? = 0
    var maxHits: String? = null
    var maxTurns: String? = null
    var minHits: String? = null
    var minTurns: String? = null
    var statChance: Int? = 0
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          ailment = ailmentAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ailment",
              "ailment", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          ailmentChance = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ailmentChance",
              "ailment_chance", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          category = categoryAdapter.fromJson(reader) ?: throw Util.unexpectedNull("category",
              "category", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          critRate = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("critRate",
              "crit_rate", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          drain = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("drain", "drain", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          flinchChance = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("flinchChance",
              "flinch_chance", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          healing = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("healing", "healing",
              reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          maxHits = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          maxTurns = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          minHits = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          minTurns = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          statChance = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("statChance",
              "stat_chance", reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffff000.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Meta(
          ailment = ailment as Ailment,
          ailmentChance = ailmentChance as Int,
          category = category as Category,
          critRate = critRate as Int,
          drain = drain as Int,
          flinchChance = flinchChance as Int,
          healing = healing as Int,
          maxHits = maxHits,
          maxTurns = maxTurns,
          minHits = minHits,
          minTurns = minTurns,
          statChance = statChance as Int
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Meta> = this.constructorRef ?:
          Meta::class.java.getDeclaredConstructor(Ailment::class.java, Int::class.javaPrimitiveType,
          Category::class.java, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, String::class.java,
          String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          ailment,
          ailmentChance,
          category,
          critRate,
          drain,
          flinchChance,
          healing,
          maxHits,
          maxTurns,
          minHits,
          minTurns,
          statChance,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Meta?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("ailment")
    ailmentAdapter.toJson(writer, value_.ailment)
    writer.name("ailment_chance")
    intAdapter.toJson(writer, value_.ailmentChance)
    writer.name("category")
    categoryAdapter.toJson(writer, value_.category)
    writer.name("crit_rate")
    intAdapter.toJson(writer, value_.critRate)
    writer.name("drain")
    intAdapter.toJson(writer, value_.drain)
    writer.name("flinch_chance")
    intAdapter.toJson(writer, value_.flinchChance)
    writer.name("healing")
    intAdapter.toJson(writer, value_.healing)
    writer.name("max_hits")
    nullableStringAdapter.toJson(writer, value_.maxHits)
    writer.name("max_turns")
    nullableStringAdapter.toJson(writer, value_.maxTurns)
    writer.name("min_hits")
    nullableStringAdapter.toJson(writer, value_.minHits)
    writer.name("min_turns")
    nullableStringAdapter.toJson(writer, value_.minTurns)
    writer.name("stat_chance")
    intAdapter.toJson(writer, value_.statChance)
    writer.endObject()
  }
}
