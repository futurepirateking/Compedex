// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.kobeissidev.jetpackcomposepokedex.data.local.converters.pokemon

import com.kobeissidev.jetpackcomposepokedex.data.model.pokemon.Emerald
import com.kobeissidev.jetpackcomposepokedex.data.model.pokemon.FireRedLeafGreen
import com.kobeissidev.jetpackcomposepokedex.data.model.pokemon.GenerationIii
import com.kobeissidev.jetpackcomposepokedex.data.model.pokemon.RubySapphire
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.reflect.Constructor
import kotlin.Int

public class GenerationIiiJsonAdapter(
  moshi: Moshi
) : JsonAdapter<GenerationIii>() {
  private val options: JsonReader.Options = JsonReader.Options.of("emerald", "firered-leafgreen",
      "ruby-sapphire")

  private val nullableEmeraldAdapter: JsonAdapter<Emerald?> = moshi.adapter(Emerald::class.java,
      emptySet(), "emerald")

  private val nullableFireRedLeafGreenAdapter: JsonAdapter<FireRedLeafGreen?> =
      moshi.adapter(FireRedLeafGreen::class.java, emptySet(), "fireRedLeafGreen")

  private val nullableRubySapphireAdapter: JsonAdapter<RubySapphire?> =
      moshi.adapter(RubySapphire::class.java, emptySet(), "rubySapphire")

  @Volatile
  private var constructorRef: Constructor<GenerationIii>? = null

  public override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("GenerationIii").append(')') }

  public override fun fromJson(reader: JsonReader): GenerationIii {
    var emerald: Emerald? = null
    var fireRedLeafGreen: FireRedLeafGreen? = null
    var rubySapphire: RubySapphire? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          emerald = nullableEmeraldAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          fireRedLeafGreen = nullableFireRedLeafGreenAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          rubySapphire = nullableRubySapphireAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff8.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  GenerationIii(
          emerald = emerald,
          fireRedLeafGreen = fireRedLeafGreen,
          rubySapphire = rubySapphire
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<GenerationIii> = this.constructorRef ?:
          GenerationIii::class.java.getDeclaredConstructor(Emerald::class.java,
          FireRedLeafGreen::class.java, RubySapphire::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          emerald,
          fireRedLeafGreen,
          rubySapphire,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: GenerationIii?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("emerald")
    nullableEmeraldAdapter.toJson(writer, value_.emerald)
    writer.name("firered-leafgreen")
    nullableFireRedLeafGreenAdapter.toJson(writer, value_.fireRedLeafGreen)
    writer.name("ruby-sapphire")
    nullableRubySapphireAdapter.toJson(writer, value_.rubySapphire)
    writer.endObject()
  }
}
